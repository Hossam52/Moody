import 'dart:developer';
import 'dart:io';

import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter/material.dart';
import 'package:moody_app/domain/models/book.dart';
import 'package:moody_app/domain/models/book_model.dart';
import 'package:moody_app/domain/models/models.dart';
import 'package:moody_app/presentation/resources/color_manager.dart';
import 'package:moody_app/shared/cubits/app_cubit/app_cubit.dart';
import 'package:moody_app/shared/cubits/home_cubit/inspiration_data_class.dart';
import 'package:moody_app/shared/helper/firebase_helper.dart';
import 'package:moody_app/shared/helper/helper_methods.dart';
import 'package:moody_app/shared/network/firebase_services/services/firebase_firestore/books_services.dart';
import 'package:moody_app/shared/network/firebase_services/services/firebase_firestore/fire_firestore.dart';
import './home_states.dart';
import 'package:dio/dio.dart';

//Bloc builder and bloc consumer methods
typedef HomeBlocBuilder = BlocBuilder<HomeCubit, HomeStates>;
typedef HomeBlocConsumer = BlocConsumer<HomeCubit, HomeStates>;

//
class HomeCubit extends Cubit<HomeStates> {
  HomeCubit() : super(IntitalHomeState());
  static HomeCubit instance(BuildContext context) =>
      BlocProvider.of<HomeCubit>(context);
  final FireStoreRepo _firestore = FireStoreRepo.instance;
  //For recent inspirations
  final InspirationData _recentData = InspirationData();
  InspirationData get getRecent => _recentData;

  //For top inspirations
  final InspirationData _topData = InspirationData();
  InspirationData get getTop => _topData;

  //For following inspirations
  final FollowingInspirationData _followingData = FollowingInspirationData();
  FollowingInspirationData get getFollowing => _followingData;

  bool isPostLiked(BuildContext context, String postId) {
    final user = AppCubit.get(context).getUser;
    return user.containsInLikes(postId);
  }

  Future<void> getGoogleBooks() async {
    final response = await Dio()
        .get('https://www.googleapis.com/books/v1/volumes?q=romance');
    log('books data');
    Autogenerated autoBooks = Autogenerated.fromJson(response.data);
    for (int index = 0; index < autoBooks.items!.length; index++) {
      Book bookF = Book(
          author: autoBooks.items![index].volumeInfo!.authors!.first,
          title: autoBooks.items![index].volumeInfo!.title!,
          id: '',
          description: autoBooks.items![index].volumeInfo!.description == null
              ? autoBooks.items![index].volumeInfo!.subtitle == null
                  ? autoBooks.items![index].volumeInfo!.title!
                  : autoBooks.items![index].volumeInfo!.subtitle!
              : autoBooks.items![index].volumeInfo!.description!,
          language: autoBooks.items![index].volumeInfo!.language!,
          url: autoBooks.items![index].volumeInfo!.infoLink!,
          rate: autoBooks.items![index].volumeInfo!.averageRating,
          classEmotion: 'neutral',
          imageUrl: autoBooks.items![index].volumeInfo!.imageLinks == null
              ? 'https://freevector-images.s3.amazonaws.com/uploads/vector/preview/36970/36970.png'
              : autoBooks.items![index].volumeInfo!.imageLinks!.thumbnail ??
                  'https://freevector-images.s3.amazonaws.com/uploads/vector/preview/36970/36970.png',
          usersFav: '');
      BooksServices.instance.addBook(bookF);
      // log(book.volumeInfo!.maturityRating.toString());
    }
    log(autoBooks.items!.length.toString());
    //log(response.data.toString());
  }

  Future<void> getRecentInspiration() async {
    try {
      emit(RecentInspirationLoadingState());
      final allData =
          await _firestore.inspirationServices.getRecentInspirations();
      _recentData.setData(allData);
      emit(RecentInspirationSuccessState());
    } catch (e) {
      emit(RecentInspirationErrorState(error: e.toString()));
    }
  }

  Future<void> getMoreRecentInspiration() async {
    try {
      emit(MoreRecentLoadingState());
      final allData = await _firestore.inspirationServices
          .getMoreRecentInspirations(_recentData.lastItem!);
      _recentData.setData(allData);
      emit(MoreRecentSuccessState());
    } catch (e) {
      log(e.toString());
      emit(MoreRecentErrorState(error: e.toString()));
    }
  }

//Top inspiration items
  Future<void> getTopInspiration() async {
    try {
      emit(TopInspirationLoadingState());
      final allData = await _firestore.inspirationServices.getTopInspirations();
      getTop.setData(allData);
      emit(TopInspirationSuccessState());
    } catch (e) {
      emit(TopInspirationErrorState(error: e.toString()));
    }
  }

  Future<void> getMoreTopInspiration() async {
    try {
      emit(MoreTopInspirationLoadingState());
      final allData = await _firestore.inspirationServices
          .getMoreTopInspirations(getTop.lastItem!);
      getTop.setData(allData);
      emit(MoreTopInspirationSuccessState());
    } catch (e) {
      emit(MoreTopInspirationErrorState(error: e.toString()));
    }
  }

//Following inspiration items with i follow

  Future<void> getFollowingInspirations(BuildContext context) async {
    final user = AppCubit.get(context).getUser;
    try {
      // final usersFollowingId = [for (int i = 0; i < 23; i++) i.toString()];
      if (user.getFollowingFriendsIds.isEmpty) {
        getFollowing.setFollowingList = user.getFollowingFriendsIds;
        return;
      }
      getFollowing.setFollowingList = user.getFollowingFriendsIds;

      emit(FollowingInspirationsLoadingState());
      final allData = await _firestore.inspirationServices
          .getFollowingInspirations(getFollowing.getCurrentSubList);
      getFollowing.setData(allData);
      emit(FollowingInspirationsSuccessState());
    } catch (e) {
      log(e.toString());
      emit(FollowingInspirationsErrorState(error: e.toString()));
    }
  }

  Future<void> getMoreFollowingInspiration() async {
    try {
      emit(MoreFollowingInspirationLoadingState());
      late QuerySnapshot<Map<String, dynamic>> allData;
      if (getFollowing.fetchNewList) {
        allData = await _firestore.inspirationServices
            .getFollowingInspirations(getFollowing.getCurrentSubList);
      } else {
        allData = await _firestore.inspirationServices
            .getMoreFollowingInspirations(
                getFollowing.lastItem!, getFollowing.getCurrentSubList);
      }
      getFollowing.setData(allData);
      emit(MoreFollowingInspirationSuccessState());
    } catch (e) {
      emit(MoreFollowingInspirationErrorState(error: e.toString()));
    }
  }

//Toggle like
  Future<void> toggleLike(BuildContext context, String postId) async {
    try {
      final user = AppCubit.get(context).getUser;
      emit(ToggleLikeLoadingState());
      if (user.containsInLikes(postId)) {
        user.removeLike(postId);
        _updatePostsWhenToggleLike(postId: postId, isIncrease: false);
        await _firestore.inspirationServices.removeLike(user.id, postId);
      } else {
        user.addLike(postId);
        _updatePostsWhenToggleLike(postId: postId, isIncrease: true);
        await _firestore.inspirationServices.addLike(user.id, postId);
      }
      emit(ToggleLikeSuccessState());
    } catch (e) {
      emit(ToggleLikeErrorState(error: e.toString()));
    }
  }

////////////////////////
  void _updatePostsWhenToggleLike(
      {required String postId, required bool isIncrease}) {
    final postIndexInRecent =
        getRecent.inspirationItems.indexWhere((e) => e.id == postId);
    final postIndexInTop =
        getTop.inspirationItems.indexWhere((e) => e.id == postId);
    final postIndexInFollowing =
        getFollowing.inspirationItems.indexWhere((e) => e.id == postId);

    if (postIndexInRecent != -1) {
      getRecent.inspirationItems[postIndexInRecent].toggleLike(isIncrease);
    }

    if (postIndexInTop != -1) {
      getTop.inspirationItems[postIndexInTop].toggleLike(isIncrease);
    }

    if (postIndexInFollowing != -1) {
      getFollowing.inspirationItems[postIndexInFollowing]
          .toggleLike(isIncrease);
    }
  }

//Add post

  Future<void> addPost(BuildContext context, String text, String mood,
      {File? image}) async {
    try {
      final user = AppCubit.get(context).getUser;
      String? urlImage;
      emit(AddPostLoadingState());
      if (image != null) {
        final imageCompressed =
            await testCompressAndGetFile(image, quality: 50);
        urlImage =
            await FirebaseHelper.uploadFileTofireStorage(imageCompressed!);
      }
      final inspirationItem = Inspiration.createNewInspirationn(
        text: text,
        date: DateTime.now().toIso8601String(),
        userName: user.name,
        userId: user.id,
        userPic: user.imagePath??'userPic',
        mood: mood,
        imagePost: urlImage,
      );
      final postId = await FireStoreRepo.instance.inspirationServices
          .createInpirationItem(inspirationItem);
      showSnackBar(
          context: context,
          text: 'Success add post',
          backgroundColor: ColorManager.successColor);
      inspirationItem.id = postId;
      _recentData.insertItem(inspirationItem, 0);
      emit(AddPostSuccessState());
    } catch (e) {
      emit(AddPostErrorState(error: e.toString()));
    }
  }
}
